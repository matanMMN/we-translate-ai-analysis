services:

  app:
    container_name: app
    build:
      context: ../../frontend  # Adjust the context to your frontend directory
      dockerfile: Dockerfile  # Specify the Dockerfile for the frontend if needed
    ports:
      - "3000:3000"  # Expose the frontend port
    environment:
      - NEXTAUTH_SECRET=SUPER_SECRET
      - NODE_DEV=development
      - NODE_ENV=production 
      - SYNCFUSION_LICENSE_KEY=ORg4AjUWIQA/Gnt2UlhhQlVMfV5AQmFNYVF2R2dJfVRydF9HZEwxOX1dQl9nSH9RckRnW35ed3xWRWQ=
      - PORT=3000
      - NEXT_PUBLIC_SERVER_URL=http://backend:8000
    networks:
      - frontend_network




  backend:
    container_name: ${APP_CONTAINER_NAME}
    stop_signal: SIGTERM
    build:
      context: ..
      dockerfile: ./.docker/Dockerfile.base
      args:
        BASE_IMAGE: ${BASE_IMAGE}
        PROJECT_ROOT: ..
        DOCKER_ROOT: code
        ENVIRONMENT: ${ENVIRONMENT}
        USER: docker
        USER_ID: 1234
        GROUP_ID: 1234
        GROUP: customgroup
        ECHO: true
        ECHO_SLEEP_SECONDS: 2
        COPY_FILES: false

    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - RUN_IN_DOCKER=True
      - DATABASE_URL=${DATABASE_URL}    # PostgreSQL
      - CELERY_BACKEND_URL=${CELERY_BACKEND_URL}  # Redis
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}  # RabbitMQ
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - ENVIRONMENT=${ENVIRONMENT}
      - APP_HOST=${APP_HOST}
      - APP_PORT=${APP_PORT}
      - APP_DEBUG_PORT=${APP_DEBUG_PORT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - BUCKET_NAME=${BUCKET_NAME}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_REGION_NAME=${AWS_REGION_NAME}
    depends_on:
      - postgresql
      - redis
      - rabbitmq
      - localstack
    env_file:
      - ../environments/.env.${ENVIRONMENT}

    networks:
      - backend_network
      - monitoring_network
      - frontend_network

    command: sleep infinity

  postgresql:
    container_name: postgresql
    image: postgres:13-alpine

    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend_network

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    # environment:
    #   - REDIS_PASSWORD=my_redis_password
    # volumes:
    #   - redis_data:/var/lib/redis/data
    # command: ["redis-server", "--requirepass", "my_redis_password"]
    networks:
      - backend_network
      - monitoring_network


  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "4369:4369"
      - "25672:25672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}

    # volumes:
    #   - "rabbitmq_data:/bitnami"
    networks:
      - backend_network

  # mongo:
  #   container_name: mongo
  #   image: mongo
  #   # restart: always
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - mongo_data:/data/db  # Persistent storage for MongoDB data
  #   networks:
  #     - backend_network
  #   command: mongod --quiet --logpath /dev/null
  #   # command: ["mongod", "--quiet","--logpath","/dev/null"]


  prometheus:
    container_name: prometheus
    image: prom/prometheus
    # restart: unless-stopped
    environment:
      - APP_CONTAINER_NAME=${APP_CONTAINER_NAME}
      - APP_PORT=${APP_PORT}
    ports:
      - 9090:9090
    volumes:
      - ../prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../prometheus_data/entrypoint.sh:/entrypoint.sh
    networks:
      - monitoring_network

  grafana:
    container_name: grafana
    image: grafana/grafana
    # restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - 3001:3001
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_PASSWORD_CHANGE=${GF_SECURITY_DISABLE_INITIAL_ADMIN_PASSWORD_CHANGE}
      - GF_LOG_LEVEL=${GF_LOG_LEVEL}
    networks:
      - monitoring_network
    volumes:
      - ../grafana_data/provisioning:/etc/grafana/provisioning

  localstack:
    image: localstack/localstack
    container_name: localstack
    environment:
      - LS_LOG=trace
      - DEBUG=1
      - EAGER_SERVICE_LOADING=0
      - LOCALSTACK-CLI=1
      - ACTIVE_PRO=0
      - SERVICES=${AWS_SERVICES}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - GATEWAY_LISTEN=0.0.0.0:4566
      - DOCKER_HOST=unix:///var/run/docker.sock
      # - AWS_ACCOUNT_ID=000000000000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    volumes:
      - ../.localstack:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend_network

  # migrate:
  #   build:
  #     context: ..
  #     dockerfile: ./.docker/Dockerfile.base
  #   environment:
  #     - DATABASE_URL=${DATABASE_URL}
  #   command: alembic upgrade head  # Run migrations
  #   depends_on:
  #     - postgresql  # Ensure DB

  # nginx:
  #   build:
  #     context: ..
  #     dockerfile: ./.docker/Dockerfile.nginx
  #   container_name: nginx
  #   ports:
  #     - "80:80"
  #   environment:
  #     - APP_NAME=${APP_NAME}
  #     - APP_CONTAINER_NAME=${APP_CONTAINER_NAME}
  #     - APP_PORT=${APP_PORT}
  #   depends_on:
  #     - ${APP_CONTAINER_NAME}
  #   networks:
  #     - backend_network
  #     - monitoring_network

  # celery_worker:
  #   restart: always  # Ensure Celery restarts if it crashes
  #   container_name: celery-worker
  #   stop_signal: SIGTERM
  #   build:
  #     context: ..
  #     dockerfile: ./.docker/Dockerfile.base
  #     args:
  #       BASE_IMAGE: ${BASE_IMAGE}
  #       PROJECT_ROOT: ..
  #       DOCKER_ROOT: code
  #       ENVIRONMENT: ${ENVIRONMENT}
  #       USER: docker
  #       USER_ID: 1234
  #       GROUP_ID: 1234
  #       GROUP: customgroup
  #       ECHO: true
  #       ECHO_SLEEP_SECONDS: 2
  #       COPY_FILES: false

  #   environment:
  #     - PYTHONUNBUFFERED=1
  #     - PYTHONDONTWRITEBYTECODE=1
  #     - RUN_IN_DOCKER=True
  #     - DATABASE_URL=${DATABASE_URL}    # PostgreSQL
  #     - CELERY_BACKEND_URL=${CELERY_BACKEND_URL}  # Redis
  #     - CELERY_BROKER_URL=${CELERY_BROKER_URL}  # RabbitMQ
  #     - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
  #     - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
  #     - ENVIRONMENT=${ENVIRONMENT}
  #     - APP_HOST=${APP_HOST}
  #     - APP_PORT=${APP_PORT}
  #     - APP_DEBUG_PORT=${APP_DEBUG_PORT}
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  #     - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
  #     - BUCKET_NAME=${BUCKET_NAME}
  #     - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
  #     - AWS_REGION_NAME=${AWS_REGION_NAME}
  #   depends_on:
  #     - postgresql
  #     - redis
  #     - rabbitmq
  #     - localstack
  #     - backend
  #   env_file:
  #     - ../environments/.env.${ENVIRONMENT}
  #   networks:
  #     - backend_network

  # celery_beat:
  #   build:
  #     context: .
  #     dockerfile: ./compose/local/fastapi/Dockerfile
  #   image: fastapi_celery_example_celery_beat
  #   command: /start-celerybeat
  #   volumes:
  #     - .:/app
  #   env_file:
  #     - .env/.dev-sample
  #   depends_on:
  #     - redis
  #     - db

  # flower:
  #   build:
  #     context: .
  #     dockerfile: ./compose/local/fastapi/Dockerfile
  #   image: fastapi_celery_example_celery_flower
  #   command: /start-flower
  #   volumes:
  #     - .:/app
  #   env_file:
  #     - .env/.dev-sample
  #   ports:
  #     - 5557:5555
  #   depends_on:
  #     - redis
  #     - db

volumes:
  mongo_data:
  redis_data:
  pg_data:
  # rabbitmq_data:

networks:
  backend_network:
    driver: bridge
  monitoring_network:
    name: monitoring_network
    driver: bridge
  frontend_network:
    name: frontend_network
    driver: bridge
